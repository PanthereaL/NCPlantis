{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 SitkaText;}{\f1\fmodern\fcharset0\fprq2 SitkaText;}{\f2\fmodern\fcharset0\fprq2 SitkaTextItalic;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;\red128\green128\blue128;}
{\*\listtable
{\list\listtemplateid1\listhybrid
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\loch\af0\hich\af0\dbch\af0\uc1\u8226\'95;}{\levelnumbers;}\fi-270\li540\lin540}{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\loch\af0\hich\af0\dbch\af0\uc1\u8226\'95;}{\levelnumbers;}\fi-270\li540\lin540}{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\loch\af0\hich\af0\dbch\af0\uc1\u8226\'95;}{\levelnumbers;}\fi-270\li540\lin540}{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\loch\af0\hich\af0\dbch\af0\uc1\u8226\'95;}{\levelnumbers;}\fi-270\li540\lin540}{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\f0\fs24\cf0
\pard\plain \sa180\sb180\ltrch\loch {Evaluering av Mikrokontrollere}
\par\plain {Prosjektet omfatter et bredt utvalg mikrokontrollere \endash  med Arduino, Raspberry Pi og ESP32 som basiselementer. Alle de tre plattformene kan programmeres i C++ via Arduino IDE, noe som forenkler den initielle utviklingsprosessen ved at den samme kodestrukturen kan benyttes p\loch\af0\hich\af0\dbch\af0\uc1\u229\'E5 tvers av enhetene. Det er imidlertid viktig \u229\'E5 p\u229\'E5peke at en universell kode ikke n\u248\'F8dvendigvis utnytter den enkelte plattforms fulle potensial, og optimaliseringer vil ofte v\u230\'E6re p\u229\'E5krevd.}
\par\plain {\f0\fs24\b1 Forslag til illustrasjon:}
\par\pard\plain \li540\fi-270\sa180\sb180\ltrch\loch \ls1\ilvl0{\listtext	 \uc0\u8226 	}{\f0\fs24\i1 Figur 1:}{ Et flytskjema som illustrerer hvordan basis C++-kode implementeres p\loch\af0\hich\af0\dbch\af0\uc1\u229\'E5 hver mikrokontroller. Dette kan vise de felles utgangspunkt og n\u248\'F8dvendige tilpasninger for hver plattform. }
\par\pard\plain \sa180\sb180\ltrch\loch {Raspberry Pi-baserte Kort og MicroPython}
\par\plain {Raspberry Pi-baserte enheter (som for eksempel Raspberry Pi Pico) tilbyr en deep sleep-funksjon som potensielt kan forlenge batterilevetiden drastisk. Forel\loch\af0\hich\af0\dbch\af0\uc1\u248\'F8pige tester antyder at ved \u229\'E5 utnytte denne funksjonen \endash  ved \u229\'E5 programmere enhetene i MicroPython, en lettvektsvariant av Python tilpasset mikrokontrollere \endash  kan batteritiden \u248\'F8kes fra omtrent 11 timer til opptil 3000 timer i hvilemodus. Det m\u229\'E5 imidlertid understrekes at disse tallene b\u248\'F8r verifiseres n\u248\'F8ye, og at overgangen fra C++ til MicroPython medf\u248\'F8rer en ny l\u230\'E6ringskurve samt behov for \u229\'E5 etablere nye verkt\u248\'F8ysett for koding. Videre m\u229\'E5 kompatibiliteten av MicroPython vurderes p\u229\'E5 tvers av de ulike maskinvarekombinasjonene, slik at potensielle utfordringer ved kodeomstilling og systemintegrasjon identifiseres tidlig.}
\par\plain {\f0\fs24\b1 Forslag til illustrasjon:}
\par\pard\plain \li540\fi-270\sb180\ltrch\loch \ls2\ilvl0{\listtext	 \uc0\u8226 	}{\f0\fs24\i1 Figur 2:}{ Et s\loch\af0\hich\af0\dbch\af0\uc1\u248\'F8ylediagram som sammenligner estimert batterilevetid med og uten bruk av deep sleep via MicroPython.}
\par\pard\plain \li540\fi-270\sa180\ltrch\loch \ls2\ilvl0{\listtext	 \uc0\u8226 	}{\f0\fs24\i1 Figur 3:}{ En tabelloversikt med sammenligning av de tekniske aspektene ved implementasjon mellom C++ og MicroPython (for eksempel utviklingsverkt\loch\af0\hich\af0\dbch\af0\uc1\u248\'F8y, l\u230\'E6ringskurve og systemkompatibilitet). }
\par\pard\plain \sa180\sb180\ltrch\loch {Arduino-baserte Kontroller}
\par\plain {Arduino-plattformene som benyttes i prosjektet opererer ved et logikkniv\loch\af0\hich\af0\dbch\af0\uc1\u229\'E5 p\u229\'E5 5V og medf\u248\'F8rer visse begrensninger med hensyn til avanserte funksjoner. Spesielt mangelen p\u229\'E5 innebygde s\u248\'F8vnfunksjoner og en integrert sanntidsklokke inneb\u230\'E6rer at det er vanskelig \u229\'E5 implementere tidssensitive funksjoner og str\u248\'F8msparingsmoduser p\u229\'E5 samme m\u229\'E5te som for andre plattformer. Dette resulterer i ekstra utfordringer n\u229\'E5r det gjelder \u229\'E5 oppn\u229\'E5 en effektiv og energibesparende drift i applikasjoner der disse egenskapene er kritiske.}
\par\plain {\f0\fs24\b1 Forslag til illustrasjon:}
\par\pard\plain \li540\fi-270\sa180\sb180\ltrch\loch \ls3\ilvl0{\listtext	 \uc0\u8226 	}{\f0\fs24\i1 Figur 4:}{ En tabell som sammenligner sentrale egenskaper for Arduino-kontrollere (5V logikkniv\loch\af0\hich\af0\dbch\af0\uc1\u229\'E5, manglende s\u248\'F8vnfunksjonalitet og frav\u230\'E6r av sanntidsklokke) med de andre plattformene. }
\par\pard\plain \sa180\sb180\ltrch\loch {ESP32: Kraft og Fleksibilitet}
\par\plain {ESP32 fremst\loch\af0\hich\af0\dbch\af0\uc1\u229\'E5r som en kraftig og fleksibel mikrokontroller, mye benyttet i integrerte systemer og IoT-applikasjoner. Den kombinerer relativt lav pris med h\u248\'F8y ytelse og har fremfor alt et sterkt kommunikasjonstilbud gjennom st\u248\'F8tte for BlueTooth, WiFi og radio. Den kompakte formfaktoren bidrar ogs\u229\'E5 til et \u248\'F8kt praktisk utbytte ved implementering i sm\u229\'E5, integrerte systemer. Denne mikrokontrolleren veier dermed opp for eventuelle begrensninger knyttet til s\u248\'F8vnfunksjoner ved at den tilbyr robust kommunikasjon og systemintegrasjon.}
\par\plain {\f0\fs24\b1 Forslag til illustrasjon:}
\par\pard\plain \li540\fi-270\sb180\ltrch\loch \ls4\ilvl0{\listtext	 \uc0\u8226 	}{\f0\fs24\i1 Figur 5:}{ Et diagram over ESP32 sin arkitektur med fremheving av de kommunikasjonsmodulene som gj\loch\af0\hich\af0\dbch\af0\uc1\u248\'F8r den egnet for tilkoblingsoppgaver (f.eks. BlueTooth, WiFi, radio).}
\par\pard\plain \li540\fi-270\sa180\ltrch\loch \ls4\ilvl0{\listtext	 \uc0\u8226 	}{\f0\fs24\i1 Figur 6:}{ En sammenligningstabell som visualiserer de viktigste tekniske egenskapene (tilkoblingsmuligheter, formfaktor, ytelse) p\loch\af0\hich\af0\dbch\af0\uc1\u229\'E5 tvers av ESP32, Arduino og Raspberry Pi-baserte enheter. }
\par\pard\plain \sa180\sb180\ltrch\loch {Denne evalueringen understreker at til tross for initial forenkling ved bruk av et felles programmeringsmilj\loch\af0\hich\af0\dbch\af0\uc1\u248\'F8 (C++ med Arduino IDE), krever de ulike mikrokontrollerne tilpassede strategier for optimal bruk. Ved \u229\'E5 benytte MicroPython for Raspberry Pi-baserte enheter \u229\'E5pnes for betydelige str\u248\'F8msparegevinster, men samtidig innf\u248\'F8res nye krav til oppl\u230\'E6ring og verkt\u248\'F8ytilpasning. Arduino-kontrollerne, med sine begrensninger, utfordrer designet imot l\u248\'F8sninger for tidsstyrte funksjoner, mens ESP32 med sine omfattende kommunikasjonsmuligheter st\u229\'E5r frem som en kraftig og allsidig plattform.}}