{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 SitkaText;}{\f1\fmodern\fcharset0\fprq2 Calibri;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;\red128\green128\blue128;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\f0\fs24\cf0
\pard\plain \tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\ltrch\loch {\f1\fs24\b0\i0 Dataarbeidet har i all hovedsak dreid seg om \loch\af1\hich\af1\dbch\af1\uc1\u229\'E5 legge til rette for sensortester, og p\u229\'E5f\u248\'F8lgende dataanalyse. Det er flere forskjellige mikrokontrollere som er kj\u248\'F8pt inn til form\u229\'E5let, med sine forskjellige behov og s\u230\'E6regenheter n\u229\'E5r det kommer til hvordan de vil programmeres og hvilke funksjoner de kan benytte. Mye tid har g\u229\'E5tt til \u229\'E5 bli venner med de forskjellige systemene, og unders\u248\'F8ke m\u229\'E5ter \u229\'E5 forbedre utviklingsprosessen.}
\par\plain {\f1\fs24\b0\i0 Arduino IDE har vist seg \loch\af1\hich\af1\dbch\af1\uc1\u229\'E5 v\u230\'E6re den plattformen som med st\u248\'F8rst grad av suksess har klart \u229\'E5 programmere de forskjellige mikrokontrollerne, inkludert de som bruker en UF2 bootloader til \u229\'E5 flashe koden til minnet. Et problem med den dessverre er at den ikke st\u248\'F8tter eksterne filer i andre mapper enn innev\u230\'E6rende prosjekts hovedmappe. Dette gj\u248\'F8r det veldig vanskelig \u229\'E5 bygge og vedlikeholde modulbasert kode p\u229\'E5 tvers av skisser, selv om den st\u248\'F8tter inkludering av .h og .cpp-filer. Hvis en skisse da inkluderer mange egendefinerte moduler, spesielt hvis disse har flere lag med dependencies, vil alle disse ligge flatt i samme mappe som hovedskissa, som gj\u248\'F8r det vanskelig \u229\'E5 navigere mellom og gj\u248\'F8re endringer der koden ligger.}
\par\plain {\f1\fs24\b0\i0 Den f\loch\af1\hich\af1\dbch\af1\uc1\u248\'F8rste editoren som ble brukt i prosessen var Arduino IDE, en enkel plattform for \u229\'E5 skrive og laste opp kode basert p\u229\'E5 C++, som viste seg kompatibel med alle de innkj\u248\'F8pte mikrokontrollerne, og kunne med riktig konfigurering laste opp direkte til brettene, p\u229\'E5 tross av at noen av dem i dokumentasjonen er opplyst om at opplastningsprosedyre er \u229\'E5 \u229\'E5pne bootloaderen og overf\u248\'F8re en kompilert fil manuelt.}
\par\plain {\f1\fs24\b0\i0 Arduino IDE er fleksibel i bruk, men mangler st\loch\af1\hich\af1\dbch\af1\uc1\u248\'F8tte for automatisk utfylling og bruk av mappestrukturer for \u229\'E5 organisere egendefinerte biblioteker, som gj\u248\'F8r at den ikke egner seg godt til denne typen arbeid. Den fungerer ogs\u229\'E5 til mer kompliserte prosjekter som g\u229\'E5r utover en enkelt skisse }
\par\plain {\f1\fs24\b0\i0 Disse endringene i koden vil da ikke overf\loch\af1\hich\af1\dbch\af1\uc1\u248\'F8res til andre skisser, som kan v\u230\'E6re en god ting for \u229\'E5 unng\u229\'E5 f\u248\'F8lgefeil, men det f\u248\'F8rer ogs\u229\'E5 til problemer n\u229\'E5r jeg gjerne skulle fikset bugs i alle linjene.}
\par\plain {\f1\fs24\b0\i0 Et alternativ jeg har sett p\loch\af1\hich\af1\dbch\af1\uc1\u229\'E5 er \u229\'E5 bruke Visual Studio Code, med PlatformI/O som utviklingsmilj\u248\'F8, da den st\u248\'F8tter mappestrukturer p\u229\'E5 en bedre m\u229\'E5te. Problemet der er at selv om det er mye dokumentasjon, er det veldig mye \u229\'E5 sette seg inn i for \u229\'E5 l\u248\'F8se det p\u229\'E5 en elegant m\u229\'E5te som er brukervennlig for meg. Visual Studio Code er i utgangspunktet en veldig enkel editor, uten kompilering og flashing innebygget, men den har mange plugins som utvider funksjonaliteten. Dette er veldig nyttig n\u229\'E5r man vet hva man gj\u248\'F8r, men er vanskelig \u229\'E5 bruke uten veiledning, spesielt n\u229\'E5r man \u248\'F8nsker \u229\'E5 bruke samme kode til forskjellige mikrokontrollere, som da krever forskjellige behandling i bakgrunnen for \u229\'E5 kompilere koden riktig til de forskjellige brettene.}
\par\plain {\f1\fs24\b0\i0 \loch\af1\hich\af1\dbch\af1\uc1\u197\'C5 balansere mellom \u229\'E5 l\u230\'E6re nye m\u229\'E5ter \u229\'E5 sette opp arbeidsstasjonen og \u229\'E5 f\u229\'E5 gjennomf\u248\'F8rt kodeoppgaver for \u229\'E5 gj\u248\'F8re klar for tester har lent tungt mot \u229\'E5 f\u229\'E5 testene til \u229\'E5 fungere fremfor \u229\'E5 bygge en god, gjenbrukbar kodebase og \u229\'E5 forst\u229\'E5 arbeidsmilj\u248\'F8et for best mulig effekt. \u216\'D8nsket er \u229\'E5 ha et milj\u248\'F8 med fleksibilitet og oversikt, men virkeligheten har v\u230\'E6rt \u229\'E5 halse etter for \u229\'E5 f\u229\'E5 ting til \u229\'E5 fungere i stedet for \u229\'E5 kunne sette seg inn i nye verkt\u248\'F8y.}
\par\plain {\f1\fs24\b0\i0 Vi har et relativt bredt utvalg i mikrokontrollere. Arduino, Raspberry Pi og ESP32 som base. Alle tre kan programmers i C++ via Arduino sin IDE, noe som forenkler prosessen. Den samme koden kan da brukes p\loch\af1\hich\af1\dbch\af1\uc1\u229\'E5 tvers av alle, skj\u248\'F8nt ikke p\u229\'E5 mest effektive m\u229\'E5te.}
\par\plain {\f1\fs24\b0\i0 De Raspberry Pi-baserte kortene har en deep sleep funksjon, men den eneste m\loch\af1\hich\af1\dbch\af1\uc1\u229\'E5ten jeg har funnet for \u229\'E5 benytte denne er ved \u229\'E5 kode dem i det mikrokontrollerorienterte spr\u229\'E5ket MicroPython, en lettvektsvariant av Python rettet mot mikrokontrollere. Denne vil drastisk redusere str\u248\'F8mforbruket for mikrokontrolleren n\u229\'E5r den venter p\u229\'E5 \u229\'E5 skulle gj\u248\'F8re arbeid igjen, fra 11 timer batteritid til omtrent 3000 timer batteritid [hvor kom disse tallene fra igjen?], men forutsetter at jeg l\u230\'E6rer meg et \u171\'ABnytt\u187\'BB programmeringsspr\u229\'E5k, og nye verkt\u248\'F8y for \u229\'E5 skrive koden jeg trenger. Jeg m\u229\'E5 ogs\u229\'E5 da unders\u248\'F8ke om MicroPython kan brukes p\u229\'E5 tvers av mikrokontrollerne, og i s\u229\'E5 fall hvilke problemer som kan oppst\u229\'E5 av den overgangen, annet enn tiden det tar i omstillingen av kodebasen. Det kan ogs\u229\'E5 vise seg at dette er en enklere m\u229\'E5te \u229\'E5 ordne all koden p\u229\'E5, men det vil kun vise seg etter mer testing.}
\par\plain {\f1\fs24\b0\i0 Arduinokontrollerne vi har tilgang til opererer alle p\loch\af1\hich\af1\dbch\af1\uc1\u229\'E5 et 5V logikkniv\u229\'E5, i motsetning til de andre, og ser ikke ut til \u229\'E5 ha samme mulighet for s\u248\'F8vnfunksjoner og pauser. Det er ingen sanntidsklokke integrert i enheten, som ogs\u229\'E5 vanskeliggj\u248\'F8r enkelte funksjoner for v\u229\'E5rt formal.}
\par\plain {\f1\fs24\b0\i0 ESP32 er en veldig kraftig og anvendelig brikke, og brukes i mange integrerte systemer p\loch\af1\hich\af1\dbch\af1\uc1\u229\'E5 grunn av denne kraften, fleksibiliteten og prisen. Den st\u248\'F8rste fordelen med disse er hvor gode de er p\u229\'E5 kobling til andre enheter, b\u229\'E5de via BlueTooth, WiFi og radio. Den nette formfaktoren er ogs\u229\'E5 et stort pluss.}
\par\plain {\f1\fs24\b0\i0 Oppgaver}
\par\plain {\f1\fs24\b0\i0 Skal fikse f\loch\af1\hich\af1\dbch\af1\uc1\u248\'F8rste lesning er for tidlig}
\par\plain {\f1\fs24\b0\i0 Ordnet det 25.3, det holdt med 10 sek for \loch\af1\hich\af1\dbch\af1\uc1\u229\'E5 f\u229\'E5 cap.sens til \u229\'E5 stabilisere seg. Dreit i cap.sens, fokus p\u229\'E5 res.sens, men ja, gjorde greia}
\par\plain {\f1\fs24\b0\i0 Done?}
\par\plain {\f1\fs24\b0\i0 Skal lese opp p\loch\af1\hich\af1\dbch\af1\uc1\u229\'E5 arkitektur, og sette opp en}
\par\plain {\f1\fs24\b0\i0 Skal ordne koden etter arkitekturen}
\par\plain {\f1\fs24\b0\i0 Skal finne ut hvor mye tid sensorene trenger for \loch\af1\hich\af1\dbch\af1\uc1\u229\'E5 \u171\'ABvarmes opp\u187\'BB}
\par\plain {\f1\fs24\b0\i0 Cap sens trenger et sted mellom 2 og 10 sek, kan testes mer}
\par\plain {\f1\fs24\b0\i0 Teste mer senere}
\par\plain {\f1\fs24\b0\i0 Skal l\loch\af1\hich\af1\dbch\af1\uc1\u230\'E6re nok til \u229\'E5 sette brettet i deep sleep}
\par\plain {\f1\fs24\b0\i0 Skal implementere gjennomsnitt}
\par\plain {\f1\fs24\b0\i0 Skal lage skript for \loch\af1\hich\af1\dbch\af1\uc1\u229\'E5 hakke opp CSV-filene for analyse}
\par\plain {\f1\fs24\b0\i0 Skal sette opp for enkel fukttest over tid, med beeper}
\par\plain {\f1\fs24\b0\i0 Gjort, dokumenter}
\par\plain {\f1\fs24\b0\i0 Sattte opp bin\loch\af1\hich\af1\dbch\af1\uc1\u230\'E6r test med en sensor, den andre og begge}
\par\plain {\f1\fs24\b0\i0 dokumentert}
\par\plain {\f1\fs24\b0\i0 Skal finne ut av Wi-Fi/Bluetooth kommunikasjon, hvordan fungerer det?}
\par\plain {\f1\fs24\b0\i0 Dokumentere hva disse er og hvordan de funker}
\par\plain {\f1\fs24\b0\i0 Dokumentere at jeg leiker med BLE}
\par\plain \f1\fs24\b0\i0}